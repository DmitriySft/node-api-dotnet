# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# Name of the run. It is overridden below  with the version of published binaries.
name: 0.0.$(Date:yyMM.d)$(Rev:rrr)

# This script must never be triggered from YAML settings for security reasons.
pr: none
trigger: none

parameters:
  # Matrix with target platforms.
- name: buildMatrix
  type: object
  default:
    - Name: win_x64
      VMImage: windows-latest
      TargetRuntime: win-x64

resources:
  repositories:
    - repository: Nodejs_19
      type: github
      endpoint: vmoroz
      name: jasongin/nodejs
      ref: refs/heads/napi-libnode-v19.9.0

jobs:
  # Build libNode binaries per platform.
  - ${{ each matrixEntry in parameters.buildMatrix }}:
    - job: buildLibNode${{ matrixEntry.Name }}
      displayName: Build libNode ${{ matrixEntry.Name }}

      pool:
        vmImage: ${{ matrixEntry.VMImage }}

      steps:
        - checkout: none

        - script: |
            git init
            git remote add origin https://vmoroz:$(githubAuthToken)@github.com/jasongin/nodejs
            git fetch --no-tags --progress --verbose --depth=1 origin napi-libnode-v19.9.0:refs/remotes/origin/napi-libnode-v19.9.0
            git switch napi-libnode-v19.9.0
          displayName: Check out napi-libnode-v19.9.0

        - task: PowerShell@2
          displayName: Download nasm
          inputs:
            targetType: 'inline'
            script: |
              Invoke-WebRequest -Uri https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/win64/nasm-2.16.01-win64.zip -OutFile nasm-2.16.01-win64.zip
              Expand-Archive nasm-2.16.01-win64.zip -DestinationPath nasm -Force;

# This task is to simulate the libnode.dll creation to make it faster
#        - task: CopyFiles@2
#          displayName: Simulate compiling libnode (step 1 of 2)
#          inputs:
#            sourceFolder: $(Build.SourcesDirectory)/nasm/nasm-2.16.01
#            targetFolder: $(Build.SourcesDirectory)/Release
#            contents: '*.exe'

# This task is to simulate the libnode.dll creation to make it faster
#        - script: ren nasm.exe libnode.dll
#          displayName: Simulate compiling libnode (step 2 of 2)
#          workingDirectory: $(Build.SourcesDirectory)/Release

        - script: call vcbuild.bat release x64 dll
          displayName: Build libNode
          env:
            path: $(Build.SourcesDirectory)\nasm\nasm-2.16.01;$(path)

        - task: CopyFiles@2
          displayName: Copy built binaries to staging
          inputs:
            sourceFolder: "$(Build.SourcesDirectory)/Release"
            targetFolder: $(Build.StagingDirectory)/native/${{ matrixEntry.TargetRuntime }}
            contents: |
              *.dll
              *.pdb

        - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
          displayName: "ðŸ“’ Generate artifact manifest: ${{ matrixEntry.TargetRuntime }}"
          inputs:
            BuildDropPath: $(Build.StagingDirectory)/native/${{ matrixEntry.TargetRuntime }}

        - task: PublishPipelineArtifact@1
          displayName: "Publish libnode artifacts: ${{ matrixEntry.TargetRuntime }}"
          inputs:
            artifactName: ${{ matrixEntry.TargetRuntime }}
            targetPath: $(Build.StagingDirectory)/native/${{ matrixEntry.TargetRuntime }}

  - job: createPackage
    displayName: Create Nuget package
    dependsOn:
      - ${{ each matrixEntry in parameters.buildMatrix }}:
        - buildLibNode${{ matrixEntry.Name }}

    variables:
      VMImage: windows-latest
      TargetRuntime: win-x64

    pool:
      vmImage: $(VMImage)

    steps:
      - checkout: self

      - ${{ each matrixEntry in parameters.buildMatrix }}:
        - task: DownloadPipelineArtifact@2
          displayName: Download ${{ matrixEntry.TargetRuntime }} libNode
          inputs:
            artifact: ${{ matrixEntry.TargetRuntime }}
            path: "$(Build.StagingDirectory)/build/nuget/build/native/${{ matrixEntry.TargetRuntime }}"

      - task: CopyFiles@2
        displayName: Copy Nuget root files
        inputs:
          sourceFolder: $(Build.SourcesDirectory)/.ado/libNode
          targetFolder: $(Build.StagingDirectory)/build/nuget
          contents: |
            *.nuspec
            *.txt
            *.md

      - task: CopyFiles@2
        displayName: Copy Nuget build files
        inputs:
          sourceFolder: $(Build.SourcesDirectory)/.ado/libNode
          targetFolder: $(Build.StagingDirectory)/build/nuget/build/native
          contents: |
            *.targets

      - script: dir $(Build.StagingDirectory)\build\nuget /s

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $Version = "19.9.0"
            Write-Host "##vso[task.setvariable variable=Version]$Version"

      - task: NuGetCommand@2
        displayName: 'NuGet Pack'
        inputs:
          command: pack
          packagesToPack: $(Build.StagingDirectory)/build/nuget/Microsoft.JavaScript.LibNode.nuspec
          packDestination: $(Build.StagingDirectory)/pkg
          buildProperties: nugetroot=$(Build.StagingDirectory)/build/nuget;RepoUri=$(Build.Repository.Uri)
          versioningScheme: byEnvVar
          versionEnvVar: Version

      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
        displayName: ðŸ“’ Generate artifact manifest
        inputs:
          BuildDropPath: $(Build.StagingDirectory)/pkg

      - task: PublishPipelineArtifact@1
        displayName: Publish artifact with packages
        inputs:
          targetPath: $(Build.StagingDirectory)/pkg
          artifactName: published-packages
